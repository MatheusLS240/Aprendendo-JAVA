public class ContaCorrente extends Conta {
    private double taxaManutencaoMensal = 10.0;
    private double limteChequeEspecial = 500;
    private double taxaSaque = 1.50;
    private boolean permiteChequeEspecial = true;

    // √ìtimo! Vamos listar os **atributos espec√≠ficos** de cada tipo de conta para te ajudar a estruturar bem a sua modelagem orientada a objetos.
    //
    //---
    //
    //## üè¶ Classe Abstrata: `Conta` (comum √†s duas)
    //
    //Esses s√£o os atributos que **toda conta** (corrente ou poupan√ßa) deve ter:
    //
    //* `int numConta`
    //* `Cliente cliente` (associa√ß√£o com o dono da conta)
    //* `double saldo`
    //* (opcional) `String agencia`
    //* (opcional) `String tipoConta` (se quiser sem heran√ßa)
    //
    //---
    //
    //## üí≥ `ContaCorrente` ‚Äì atributos espec√≠ficos
    //
    //S√£o os que s√≥ fazem sentido para uma conta do tipo **corrente**:
    //
    //| Atributo                        | Descri√ß√£o                                                              |
    //| ------------------------------- | ---------------------------------------------------------------------- |
    //| `double taxaManutencao`         | Valor mensal fixo cobrado da conta                                     |
    //| `double limiteChequeEspecial`   | Valor que o cliente pode usar al√©m do saldo (saldo negativo permitido) |
    //| `double taxaSaque`              | Valor cobrado por cada saque (se houver)                               |
    //| `boolean permiteChequeEspecial` | Habilita ou desabilita o uso do limite                                 |
    //
    //---
    //
    //## üí∞ `ContaPoupanca` ‚Äì atributos espec√≠ficos
    //
    //Para contas de **poupan√ßa**, o foco √© em rendimento e seguran√ßa:
    //
    //| Atributo                       | Descri√ß√£o                                       |
    //| ------------------------------ | ----------------------------------------------- |
    //| `double taxaRendimento`        | Percentual mensal de juros (ex: 0.5%)           |
    //| `LocalDate dataAniversario`    | Dia do m√™s em que o rendimento √© aplicado       |
    //| `boolean rendimentoAutomatico` | Se os juros s√£o aplicados automaticamente       |
    //| `int carenciaDias`             | N√∫mero de dias m√≠nimos entre dep√≥sitos e saques |
    //
    //---
    //
    //## üß† Dica:
    //
    //Se voc√™ **usar heran√ßa**, `ContaCorrente` e `ContaPoupanca` v√£o **herdar os atributos da classe `Conta`**, e voc√™ s√≥ precisa adicionar o que √© diferente em cada uma.
    //
    //---
    //
    //Se quiser, posso te ajudar a montar a estrutura de classes completa (sem c√≥digo, ou com, se quiser depois). Quer montar junto?


    //Boa! O **cheque especial** √© um recurso financeiro comum em contas correntes, e voc√™ pode simular ele facilmente no seu sistema.
    //
    //---
    //
    //## üí≥ O que √© cheque especial (na pr√°tica)?
    //
    //√â um **empr√©stimo autom√°tico** que o banco oferece quando o saldo da conta vai para abaixo de zero.
    //Ou seja: o cliente pode **sacar ou transferir mais do que tem**, at√© um limite definido.
    //
    //---
    //
    //## üß† Exemplo real:
    //
    //* Saldo atual: R\$ 100,00
    //* Limite de cheque especial: R\$ 500,00
    //* Se o cliente tentar sacar R\$ 400, **o sistema permite**
    //* O novo saldo ser√°: **-R\$ 300,00**, ainda dentro do limite
    //
    //---
    //
    //## üîß Como simular no sistema (em l√≥gica):
    //
    //1. A conta corrente tem um atributo:
    //
    //   * `limiteChequeEspecial = 500.00`
    //
    //2. Na hora de sacar ou transferir:
    //
    //   * Em vez de validar s√≥ `saldo >= valor`
    //   * Valida: `saldo + limiteChequeEspecial >= valor`
    //
    //3. Se o saldo for negativo:
    //
    //   * Voc√™ pode cobrar **juros** depois ou mostrar que est√° ‚Äúusando o cheque especial‚Äù
    //
    //---
    //
    //## üì¶ Atributos sugeridos para `ContaCorrente`
    //
    //| Atributo                       | Tipo                                              | Descri√ß√£o |
    //| ------------------------------ | ------------------------------------------------- | --------- |
    //| `double limiteChequeEspecial`  | Limite que o cliente pode usar al√©m do saldo      |           |
    //| `double jurosChequeEspecial`   | Percentual de juros aplicado sobre saldo negativo |           |
    //| `boolean usandoChequeEspecial` | (opcional) Se a conta est√° negativada             |           |
    //
    //---
    //
    //## üí° Coisas que voc√™ pode implementar depois
    //
    //* Metodo para **calcular os juros** sobre o valor usado do cheque especial
    //* Limita√ß√£o: cliente s√≥ pode usar se estiver habilitado (`permiteChequeEspecial == true`)
    //* Mostrar no extrato quando o saldo est√° negativo
    //
    //---
    //
    //Se quiser, posso te ajudar a estruturar a l√≥gica do saque j√° incluindo esse comportamento do cheque especial. Quer fazer isso?

    //Perfeito, vamos focar s√≥ na **ideia e arquitetura do projeto banc√°rio**, sem c√≥digo.
    //
    //---
    //
    //## üí° **Projeto: Sistema Banc√°rio Simples**
    //
    //Um sistema para simular as opera√ß√µes b√°sicas de um banco, voltado para pr√°tica de orienta√ß√£o a objetos e modelagem de dados. Ideal para aprofundar conceitos como encapsulamento, heran√ßa, polimorfismo e estrutura de dados.
    //
    //---
    //
    //### üéØ **Objetivos do Projeto**
    //
    //* Simular a cria√ß√£o e gest√£o de contas banc√°rias
    //* Realizar opera√ß√µes como saque, dep√≥sito e transfer√™ncia
    //* Aprender a estruturar dados e classes de forma limpa e reutiliz√°vel
    //* Trabalhar com cole√ß√µes para armazenar m√∫ltiplas contas
    //* Evoluir para arquivos, interface gr√°fica ou at√© APIs REST
    //
    //---
    //
    //## üìê **Arquitetura Conceitual**
    //
    //### üìÅ Entidades:
    //
    //* **Cliente**
    //
    //  * Nome
    //  * CPF
    //  * (Possivelmente e-mail ou telefone)
    //
    //* **Conta (abstrata)**
    //
    //  * N√∫mero √∫nico da conta
    //  * Cliente associado
    //  * Saldo
    //  * M√©todos: depositar, sacar, transferir
    //  * Tipo de conta (corrente ou poupan√ßa)
    //
    //* **Conta Corrente**
    //
    //  * Permite saque, dep√≥sito e transfer√™ncias
    //  * Pode incluir taxas
    //
    //* **Conta Poupan√ßa**
    //
    //  * Pode render juros
    //  * Restri√ß√µes de saque ou dias espec√≠ficos
    //
    //* **Banco**
    //
    //  * Armazena uma lista de contas
    //  * Permite criar e consultar contas
    //  * Faz a ponte entre o "usu√°rio" e os dados
    //
    //---
    //
    //## üîÑ **Fluxo de Opera√ß√µes**
    //
    //1. **Criar cliente e conta**
    //
    //   * Solicita nome e CPF
    //   * Escolhe tipo de conta
    //
    //2. **Consultar saldo ou dados da conta**
    //
    //   * Mostra informa√ß√µes da conta
    //
    //3. **Depositar**
    //
    //   * Soma valor ao saldo da conta
    //
    //4. **Sacar**
    //
    //   * Verifica se h√° saldo suficiente
    //   * Subtrai do saldo
    //
    //5. **Transferir**
    //
    //   * Solicita n√∫mero da conta destino
    //   * Verifica saldo e transfere valores entre contas
    //
    //6. **Listar contas**
    //
    //   * Mostra todas as contas criadas com seus dados
    //
    //---
    //
    //## üß† **Conceitos de Programa√ß√£o Aplicados**
    //
    //* **Encapsulamento:** proteger dados com m√©todos de acesso
    //* **Heran√ßa:** contas herdando de uma classe abstrata
    //* **Polimorfismo:** tratar diferentes tipos de conta de forma unificada
    //* **Cole√ß√µes:** usar listas para armazenar v√°rias contas
    //* **Separa√ß√£o de responsabilidades:** banco cuida da l√≥gica, conta dos dados
    //
    //---
    //
    //## üöÄ **Evolu√ß√µes poss√≠veis**
    //
    //* **Persist√™ncia de dados:**
    //
    //  * Salvar em arquivo `.txt`, `.csv` ou banco de dados
    //
    //* **Interface Gr√°fica:**
    //
    //  * Criar um menu visual com Swing ou JavaFX
    //
    //* **API REST:**
    //
    //  * Criar uma API com Spring Boot para gerenciar as contas via JSON
    //
    //* **Sistema de autentica√ß√£o:**
    //
    //  * Cada conta tem login e senha
    //
    //* **Hist√≥rico de transa√ß√µes:**
    //
    //  * Lista de dep√≥sitos, saques e transfer√™ncias
    //
    //---
    //
    //Se quiser, posso montar um plano de desenvolvimento passo a passo, tipo "o que fazer em cada etapa". Quer isso?
}
